// --------------------------------- //
// Project: galaXYZ
// Start: Monday, November 23, 2015
// IDE Version: 14.006


// SETCURRENTDIR("Media") // go to media files

TYPE options_TYPE
	resolutionX
	resolutionY
	fullscreen
	debugmode
	debuglevel
ENDTYPE

TYPE startup_TYPE
	info$
ENDTYPE

TYPE logging_TYPE
	info$
ENDTYPE

TYPE console_TYPE

ENDTYPE

TYPE system_TYPE
	documentsFolder$

	options AS options_TYPE
	startup[] AS startup_TYPE
	logging[] AS logging_TYPE
ENDTYPE

GLOBAL sys AS system_TYPE

FUNCTION system:
	SYS_initial()

ENDFUNCTION

FUNCTION SYS_initial:

	AUTOPAUSE FALSE
	SYSTEMPOINTER TRUE

	SYS_checkDocumentDir()
	SYS_checkOptions()

ENDFUNCTION

FUNCTION SYS_addLog: info$
LOCAL log AS logging_TYPE

	 log.info$ = (PLATFORMINFO$("TIME") + " | " + info$)

	 DIMPUSH sys.logging[], log


ENDFUNCTION

FUNCTION SYS_addConsole:



ENDFUNCTION

FUNCTION SYS_checkDocumentDir:
LOCAL ok

	ok = DOESDIREXIST(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ")

		IF ok = TRUE THEN SYS_startupOutput(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ" + " found")
		IF ok = FALSE THEN SYS_createDir(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ")

		SYS_setDocumentDir(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ")

	ok = DOESDIREXIST(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ/log")

		IF ok = TRUE THEN SYS_startupOutput(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ/log" + " found")
		IF ok = FALSE THEN SYS_createDir(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ/log")

	ok = DOESDIREXIST(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ/save")

		IF ok = TRUE THEN SYS_startupOutput(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ/save" + " found")
		IF ok = FALSE THEN SYS_createDir(PLATFORMINFO$("DOCUMENTS") + "/galaXYZ/save")


ENDFUNCTION

FUNCTION SYS_setDocumentDir: info$

	sys.documentsFolder$ = info$

ENDFUNCTION

FUNCTION SYS_createDir: directory$
LOCAL ok

	ok = CREATEDIR(directory$)

	IF ok = TRUE THEN RETURN
	IF ok = FALSE THEN END

ENDFUNCTION

FUNCTION SYS_startupOutput: info$
LOCAL startup AS startup_TYPE, posY

	startup.info$ = info$

	DIMPUSH sys.startup[], startup

	FOREACH s IN sys.startup[]

		PRINT s.info$, 0, posY
		INC posY, 20
		SHOWSCREEN
	NEXT


ENDFUNCTION

FUNCTION SYS_checkOptions:
LOCAL ok

	ok = DOESFILEEXIST(sys.documentsFolder$ + "/options.ini")

	DEBUG sys.documentsFolder$+ "/options.ini"

	IF ok = FALSE

		SYS_startupOutput(sys.documentsFolder$ + "/options.ini" + " not found")

		SYS_generateDefaultOptionsFile()
		SYS_loadDefaultOptions()

	ENDIF

	IF ok = TRUE

		SYS_startupOutput(sys.documentsFolder$ + "/options.ini" + " found")

		SYS_loadOptionsFromFile()

	ENDIF

ENDFUNCTION

FUNCTION SYS_generateDefaultOptionsFile:

	INIOPEN sys.documentsFolder$ + "/options.ini"
		INIPUT "options", "resolutionX", "1024"
		INIPUT "options", "resolutionY", "768"
		INIPUT "options", "fullscreen", "0"
		INIPUT "options", "debugmode", "0"
		INIPUT "options", "debuglevel", "0"
	INIOPEN ""

ENDFUNCTION

FUNCTION SYS_loadDefaultOptions:

	sys.options.resolutionX = 1024
	sys.options.resolutionY = 768
	sys.options.fullscreen = 0
	sys.options.debugmode = 0
	sys.options.debuglevel = 0

ENDFUNCTION

FUNCTION SYS_loadOptionsFromFile:
LOCAL resX$, resY$, full$, debM$, debL$
LOCAL failed

	INIOPEN sys.documentsFolder$ + "/options.ini"
		resX$ = INIGET$("options", "resolutionX")
		resY$ = INIGET$("options", "resolutionY")
		full$ = INIGET$("options", "fullscreen")
		debM$ = INIGET$("options", "debugmode")
		debL$ = INIGET$("options", "debuglevel")

		IF resX$ = "NO_DATA" OR resY$ = "NO_DATA" OR full$ = "NO_DATA" OR debM$ = "NO_DATA" OR debL$ = "NO_DATA"
			SYS_loadDefaultOptions()
			KILLFILE sys.documentsFolder$ + "/options.ini"
			failed = TRUE
		ENDIF

		IF failed = FALSE
			sys.options.resolutionX = resX$
			sys.options.resolutionY = resY$
			sys.options.fullscreen =  full$
			sys.options.debugmode = debM$
			sys.options.debuglevel = debL$
		ENDIF

	INIOPEN ""

ENDFUNCTION

FUNCTION SYS_exportLogs:
LOCAL output$[], time$[], ok

	IF sys.options.debugmode = 1

	    SPLITSTR(PLATFORMINFO$("TIME"), output$[], " ")
	    SPLITSTR(output$[1], time$[], ":")

		ok = DOESFILEEXIST(sys.documentsFolder$ + "/log/" + output$[0] + "_" + time$[0] + "_" + time$[1] + "_" + time$[2] + ".txt")

		IF ok = TRUE
			OPENFILE(0, sys.documentsFolder$ + "/log/" + output$[0] + "_" + time$[0] + "_" + time$[1] + "_" + time$[2] + ".txt", -1)
		ELSE
			OPENFILE(0, sys.documentsFolder$ + "/log/" + output$[0] + "_" + time$[0] + "_" + time$[1] + "_" + time$[2] + ".txt", 0)
		ENDIF

			FOREACH l IN sys.logging[]
				WRITELINE 0, l.info$
			NEXT

		CLOSEFILE 0

	ENDIF


ENDFUNCTION


FUNCTION SYS_FNG$: start, lang
// ==========================
// Fantasy Name Generator 1.0
// ==========================
//
// &#39;start&#39; --> gibt an, ob der Anfangsbuchstabe ein Mitlaut oder ein Selbstlaut ist
// 0 = Zufall
// 1 = Mitlaut
// 2 = Selbstlaut
//
// &#39;lang&#39; --> gibt die Länge des gesamten Wortes an
LOCAL tmp, name$, status, buchst$, z_mit, z_sel, intern, status_tmp

	FOR tmp = 1 TO lang


	// Hier liegen die Standard - RND&#39;s
	        IF start = 0
	                status_tmp = RND(100)
	                IF status_tmp <= 49 THEN status = 1
	                IF status_tmp > 49 THEN status = 2
	                start = 3
	        ENDIF

	        IF start = 1 THEN status = 1
	        IF start = 2 THEN status = 2







	SELECT status


	// Hier werden die Mitlaute zufällig zugeteilt
	CASE 1

	        WHILE TRUE

	                buchst$ = CHR$(RND(25) + 97)

	                IF ASC(buchst$) <> 97 AND ASC(buchst$) <> 101 AND ASC(buchst$) <> 105 AND ASC(buchst$) <> 111 AND ASC(buchst$) <> 117
	                        IF tmp = 1 THEN status = 2
	                        IF tmp > 1

	                                intern =  RND(100)
	                                IF intern <= 49
	                                        status = 1
	                                        z_mit = z_mit + 1
	                                ENDIF
	                                IF intern > 49
	                                        status = 2
	                                        z_mit = 0
	                                ENDIF
	                                // d/n/q/g/y/x/k
	                                IF z_mit >= 2 OR ASC(buchst$) = 100 OR ASC(buchst$) = 110 OR ASC(buchst$) = 115 OR ASC(buchst$) = 113 OR ASC(buchst$) = 103 OR ASC(buchst$) = 121 OR ASC(buchst$) = 120 OR ASC(buchst$) = 107
	                                        status = 2
	                                        z_mit = 0
	                                ENDIF

	                        ENDIF
	                        BREAK
	                ENDIF

	        WEND


	// Hier werden die Selbstlaute zufällig zugeteilt
	CASE 2

	        WHILE TRUE

	                buchst$ = CHR$(RND(25) + 97)

	                IF ASC(buchst$) = 97 OR ASC(buchst$) = 101 OR ASC(buchst$) = 105 OR ASC(buchst$) = 111 OR ASC(buchst$) = 117
	                        IF tmp = 1 THEN status = 1
	                        IF tmp > 1

	                                intern =  RND(100)
	                                IF intern <= 49
	                                        status = 2
	                                        z_sel = z_sel + 1
	                                ENDIF
	                                IF intern > 49
	                                        status = 1
	                                        z_sel = 0
	                                ENDIF
	                                IF z_sel >= 2 OR ASC(buchst$) = 117 OR ASC(buchst$) = 101
	                                        status = 1
	                                        z_sel = 0
	                                ENDIF

	                        ENDIF
	                        BREAK
	                ENDIF

	        WEND

	ENDSELECT


	        IF tmp = 1
	                name$ = name$ + UCASE$(buchst$)
	        ELSE
	                name$ = name$ + LCASE$(buchst$)
	        ENDIF


	NEXT


	RETURN name$

ENDFUNCTION

FUNCTION SYS_getScreenCenterHorizontal:
LOCAL position
	
	position = sys.options.resolutionX / 2
	
	RETURN position

ENDFUNCTION