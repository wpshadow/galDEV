// --------------------------------- //
// Project: galaXYZ
// Start: Monday, November 23, 2015
// IDE Version: 14.006


// SETCURRENTDIR("Media") // go to media files

TYPE gfx_TYPE
	id
	sizeX
	sizeY
ENDTYPE

TYPE mouse_TYPE
	x
	y
	b1
	b2
	b1_press
	b2_press
ENDTYPE

TYPE position_TYPE
	x
	y
	lenght
	width
ENDTYPE

TYPE button_TYPE
	text$
	information$
	position AS position_TYPE
ENDTYPE

TYPE label_TYPE
	text$
	position AS position_TYPE
ENDTYPE

TYPE rgb_TYPE
	r
	g
	b
ENDTYPE

TYPE color_TYPE
	button AS rgb_TYPE
	buttonMouseOver AS rgb_TYPE
	buttonPress AS rgb_TYPE
	backgroundUp AS rgb_TYPE
	backgroundDown AS rgb_TYPE
ENDTYPE

TYPE font_TYPE
	id
	sizeX
	sizeY
ENDTYPE

TYPE gui_TYPE
	color AS color_TYPE
	mouse AS mouse_TYPE
	button[] AS button_TYPE
	label[] AS label_TYPE

	font[] AS font_TYPE
ENDTYPE

GLOBAL gui AS gui_TYPE


// --------------------------------- //

FUNCTION guiInit:

	GUI_initColor()
	GUI_loader()

ENDFUNCTION

FUNCTION guiUpdate$:
LOCAL hit$

	GUI_drawBackground()

	GUI_updateMouse()

	hit$ = GUI_drawButton$()
	
	//DEBUG hit$
	
	GUI_drawLabel()
	
	IF hit$ <> "NULL"
		RETURN hit$
	ELSE
		RETURN "NULL"
	ENDIF

ENDFUNCTION

FUNCTION GUI_loader:
LOCAL f AS font_TYPE, count, tmp, tmp$, file$

	INIOPEN "media/gfx.ini"

		count = INIGET$("font", "counter")

		FOR tmp = 0 TO count - 1
			tmp$ = tmp
			file$ = "font_" + tmp$
			f.id = GENFONT()
			LOADFONT INIGET$("font", file$), f.id
			SETFONT f.id
			GETFONTSIZE f.sizeX, f.sizeY

			DIMPUSH gui.font[], f
		NEXT

	INIOPEN ""

ENDFUNCTION

FUNCTION GUI_initColor:

	gui.color.button.r = 0
	gui.color.button.g = 64
	gui.color.button.b = 96

	gui.color.buttonMouseOver.r = 0
	gui.color.buttonMouseOver.g = 64 + 16
	gui.color.buttonMouseOver.b = 96 + 32

	gui.color.buttonPress.r = 0
	gui.color.buttonPress.g = 64 + 32
	gui.color.buttonPress.b = 96 + 64

	gui.color.backgroundUp.r = 0
	gui.color.backgroundUp.g = 24
	gui.color.backgroundUp.b = 48

	gui.color.backgroundDown.r = 0
	gui.color.backgroundDown.g = 0
	gui.color.backgroundDown.b = 0

ENDFUNCTION

FUNCTION GUI_updateMouse:
LOCAL x, y, b1, b2, b1_press, b2_press
STATIC b1_tmp, b2_tmp, press_init, press_timer_old

	MOUSESTATE x, y, b1_press, b2_press

		gui.mouse.x = x
		gui.mouse.y = y

	IF b1_press = FALSE
		b1 = FALSE
		press_init = FALSE
	ENDIF
	IF b1_press = TRUE
		b1_tmp = TRUE
		IF press_init = FALSE
			press_timer_old = GETTIMERALL() + 500
			press_init = TRUE
		ENDIF
	ENDIF
	IF b1_press = FALSE AND b1_tmp = TRUE AND GETTIMERALL() <= press_timer_old
		b1 = TRUE
		b1_tmp = FALSE
	ENDIF

	IF b2_press = FALSE THEN b2 = FALSE
	IF b2_press = TRUE THEN b2_tmp = TRUE
	IF b2_press = FALSE AND b2_tmp = TRUE
		b2 = TRUE
		b2_tmp = FALSE
	ENDIF

	gui.mouse.b1 = b1
	gui.mouse.b2 = b2
	gui.mouse.b1_press = b1_press
	gui.mouse.b2_press = b2_press

ENDFUNCTION

FUNCTION GUI_addButton: text$, information$, x, y, lenght=250, width=25
LOCAL b AS button_TYPE

	b.text$ = text$
	b.information$ = information$
	b.position.x = x
	b.position.y = y
	b.position.lenght = lenght
	b.position.width = width
	
	DIMPUSH gui.button[], b

ENDFUNCTION

FUNCTION GUI_drawButton$:
LOCAL active, returnInfo$

	IF LEN(gui.button[]) > 0
		FOREACH b IN gui.button[]

			IF gui.mouse.x >= b.position.x AND gui.mouse.x < b.position.x + b.position.lenght AND gui.mouse.y >= b.position.y AND gui.mouse.y < b.position.y + b.position.width
				IF gui.mouse.b1_press = 1
					active = 2
				ELSE
					active = 1
				ENDIF
				
				IF gui.mouse.b1 = 1
					returnInfo$ = b.information$
				ENDIF
				
			ELSE
				active = 0
			ENDIF
			
			

			GUI_drawRect(b.position.x, b.position.y, b.position.lenght, b.position.width, active)
			IF active > 0
				GUI_drawBorder(b.position.x, b.position.y, b.position.lenght, b.position.width, active)
			ENDIF
			GUI_centreText(b.text$, 0, b.position.x, b.position.y, b.position.lenght, b.position.width)

		NEXT
	ENDIF
	
	//DEBUG returnInfo$ + "\n"	
		
	IF LEN(returnInfo$) > 0
		RETURN returnInfo$
	ELSE
		RETURN "NULL"
	ENDIF

ENDFUNCTION

FUNCTION GUI_drawRect:x, y, l, b, active
LOCAL r, g, bl

	SELECT active
	CASE 0
		r = gui.color.button.r
		g = gui.color.button.g
		bl = gui.color.button.b
	CASE 1
		r = gui.color.buttonMouseOver.r
		g = gui.color.buttonMouseOver.g
		bl = gui.color.buttonMouseOver.b
	CASE 2
		r = gui.color.buttonPress.r
		g = gui.color.buttonPress.g
		bl = gui.color.buttonPress.b
	ENDSELECT

	DRAWRECT x, y, l, b, RGB(r, g, bl)

ENDFUNCTION

FUNCTION GUI_drawBorder: x, y, l, b, active

	SELECT active
	CASE 1
		DRAWLINE x, y, x + l - 1, y, RGB(192, 192, 192)
		DRAWLINE x, y, x, y + b - 1, RGB(192, 192, 192)
		DRAWLINE x, y + b - 1, x + l - 1, y + b - 1, RGB(128, 128, 128)
		DRAWLINE x + l - 1, y, x + l - 1, y + b - 1, RGB(128, 128, 128)
	CASE 2
		DRAWLINE x, y, x + l - 1, y, RGB(255, 255, 255)
		DRAWLINE x, y, x, y + b - 1, RGB(255, 255, 255)
		DRAWLINE x, y + b - 1, x + l - 1, y + b - 1, RGB(192, 192, 192)
		DRAWLINE x + l - 1, y, x + l - 1, y + b - 1, RGB(192, 192, 192)
	ENDSELECT

ENDFUNCTION

FUNCTION GUI_centreText: text$, fontID, x, y, l, b
LOCAL anzahlBuchstaben, sizeX, sizeY, positionX, positionY

	anzahlBuchstaben = LEN(text$)
	sizeX = gui.font[0].sizeX
	sizeY = gui.font[0].sizeY

	positionX = x + ((l - (anzahlBuchstaben * sizeX)) / 2)
	positionY = y + ((b - sizeY) / 2) - 1

	PRINT text$, positionX, positionY

ENDFUNCTION

FUNCTION GUI_addLabel: text$, x, y, lenght=250, width=25
LOCAL l AS label_TYPE

	l.text$ = text$
	l.position.x = x
	l.position.y = y
	l.position.lenght = lenght
	l.position.width = width

	DIMPUSH gui.label[], l

ENDFUNCTION

FUNCTION GUI_drawLabel:

	IF LEN(gui.label[]) > 0
		FOREACH l IN gui.label[]
			GUI_drawRect(l.position.x, l.position.y, l.position.lenght, l.position.width, 0)
			GUI_drawBorder(l.position.x, l.position.y, l.position.lenght, l.position.width, 1)
			GUI_centreText(l.text$, 0, l.position.x, l.position.y, l.position.lenght, l.position.width)
		NEXT
	ENDIF

ENDFUNCTION

FUNCTION GUI_clearUI:

	IF LEN(gui.button[]) > 0
		FOREACH b IN gui.button[]
			DELETE b
		NEXT
	ENDIF

ENDFUNCTION

FUNCTION GUI_setBackground:



ENDFUNCTION

FUNCTION GUI_drawBackground:

	STARTPOLY
		POLYVECTOR 0, 0, 0, 0, RGB(	gui.color.backgroundUp.r, gui.color.backgroundUp.g, gui.color.backgroundUp.b)
		POLYVECTOR 0, sys.options.resolutionY, 0, 0, RGB(	gui.color.backgroundDown.r, gui.color.backgroundDown.g, gui.color.backgroundDown.b)
		POLYVECTOR sys.options.resolutionX, sys.options.resolutionY, 0, 0, RGB(	gui.color.backgroundDown.r, gui.color.backgroundDown.g, gui.color.backgroundDown.b)
		POLYVECTOR sys.options.resolutionX, 0, 0, 0, RGB(	gui.color.backgroundUp.r, gui.color.backgroundUp.g, gui.color.backgroundUp.b)
	ENDPOLY

ENDFUNCTION